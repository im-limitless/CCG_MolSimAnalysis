import numpy as np
import os
import warnings
    
def CreateCP2KInputfile_CP_Like(BaseIn = None,Base = None,OutFldr = None,Wall = None,CoordOut = None,VelOut = None,ABCOut = None,FixOut = None,Step = None,EXOR = None,Gam = None,NGam = None,Dir = None): 
    # write submission script
    
    OutLoc = np.array([Base,'\',Dir])
    if os.path.exist(str(np.array([OutLoc]))):
        warnings.warn('Directory already exists! Continuing with next file.')
        return
    else:
        mkdir(np.array([OutLoc]))
    
    fidout = open(np.array([OutLoc,'\',Dir,'.inp']),'w')
    fidout.write(np.array(['# CP2K input file created by Matt Darby, Imperial College London for system ',OutFldr,newline]) % ())
    fidout.write(np.array([' &GLOBAL',newline]) % ())
    fidout.write(np.array(['   PRINT_LEVEL  LOW',newline]) % ())
    fidout.write(np.array(['   PROJECT_NAME ',OutFldr,newline]) % ())
    fidout.write(np.array(['   RUN_TYPE  MD',newline]) % ())
    fidout.write(np.array(['   WALLTIME ',num2str(Wall * 60 * 60 - 300,'%i'),newline]) % ())
    fidout.write(np.array([' &END GLOBAL',newline]) % ())
    fidout.write(np.array([' &MOTION',newline]) % ())
    fidout.write(np.array(['   &MD',newline]) % ())
    fidout.write(np.array(['     ENSEMBLE  LANGEVIN',newline]) % ())
    fidout.write(np.array(['	  &LANGEVIN',newline]) % ())
    fidout.write(np.array(['	   GAMMA     ',num2str(Gam),newline]) % ())
    fidout.write(np.array(['	   NOISY_GAMMA     ',num2str(NGam),newline]) % ())
    fidout.write(np.array(['     &END LANGEVIN',newline]) % ())
    fidout.write(np.array(['     STEPS  1000',newline]) % ())
    fidout.write(np.array(['     TIMESTEP     0.5',newline]) % ())
    #     fprintf(fidout,['     TEMPERATURE     3.4000000000000000E+02' newline]);
#     fprintf(fidout,['     TEMP_TOL     70.0000000000000000E+00' newline]);
#     fprintf(fidout,['	 &THERMOSTAT' newline]);
#     fprintf(fidout,['       &CSVR' newline]);
#     fprintf(fidout,['         TIMECON     1000' newline]);
#     fprintf(fidout,['       &END CSVR' newline]);
#     fprintf(fidout,['     &END THERMOSTAT' newline]);
    fidout.write(np.array(['    &END MD',newline]) % ())
    fidout.write(np.array(['   &CONSTRAINT',newline]) % ())
    fidout.write(np.array(['     &FIXED_ATOMS',newline]) % ())
    fidout.write(np.array([FixOut,newline]) % ())
    fidout.write(np.array(['     &END FIXED_ATOMS',newline]) % ())
    fidout.write(np.array(['   &END CONSTRAINT',newline]) % ())
    fidout.write(np.array(['   &PRINT',newline]) % ())
    fidout.write(np.array(['     &VELOCITIES  ON',newline]) % ())
    fidout.write(np.array(['     &END VELOCITIES',newline]) % ())
    fidout.write(np.array(['     &RESTART  SILENT',newline]) % ())
    fidout.write(np.array(['       ADD_LAST  NUMERIC',newline]) % ())
    fidout.write(np.array(['       &EACH',newline]) % ())
    fidout.write(np.array(['         MD  1',newline]) % ())
    fidout.write(np.array(['       &END EACH',newline]) % ())
    fidout.write(np.array(['     &END RESTART',newline]) % ())
    fidout.write(np.array(['   &END PRINT',newline]) % ())
    fidout.write(np.array([' &END MOTION',newline]) % ())
    fidout.write(np.array([' &FORCE_EVAL',newline]) % ())
    fidout.write(np.array(['   METHOD  QS',newline]) % ())
    #     fprintf(fidout,['   &EXTERNAL_POTENTIAL' newline]);
#     fprintf(fidout,['    ATOMS_LIST ' num2str(IonicSpecs') newline]);
#     fprintf(fidout,['    FUNCTION (1.0E-6)*((Z-' num2str(Vector(3,3)*1.88973/2) ')^4)' newline]);
#     fprintf(fidout,['   &END EXTERNAL_POTENTIAL' newline]);
    fidout.write(np.array(['   &DFT',newline]) % ())
    fidout.write(np.array(['     BASIS_SET_FILE_NAME ./GTH_BASIS_SETS',newline]) % ())
    fidout.write(np.array(['     POTENTIAL_FILE_NAME ./GTH_POTENTIALS',newline]) % ())
    fidout.write(np.array(['     WFN_RESTART_FILE_NAME ../../',OutFldr,'-RESTART.wfn',newline]) % ())
    fidout.write(np.array(['     &SCF',newline]) % ())
    #     fprintf(fidout,['       MAX_SCF  800' newline]);
    fidout.write(np.array(['       MAX_SCF_HISTORY  3',newline]) % ())
    fidout.write(np.array(['       EPS_SCF     1.0E-06',newline]) % ())
    fidout.write(np.array(['       EPS_SCF_HISTORY     1.0E-05',newline]) % ())
    fidout.write(np.array(['       EPS_DIIS     1.0E-01',newline]) % ())
    fidout.write(np.array(['       SCF_GUESS  HISTORY_RESTART',newline]) % ())
    fidout.write(np.array(['       &OT  T',newline]) % ())
    fidout.write(np.array(['         MINIMIZER  DIIS',newline]) % ())
    fidout.write(np.array(['         SAFE_DIIS  F',newline]) % ())
    fidout.write(np.array(['         N_HISTORY_VEC  7',newline]) % ())
    fidout.write(np.array(['         STEPSIZE     ',num2str(Step),newline]) % ())
    fidout.write(np.array(['         PRECONDITIONER  FULL_SINGLE_INVERSE',newline]) % ())
    fidout.write(np.array(['         ENERGY_GAP     1.0000000000000000E-03',newline]) % ())
    fidout.write(np.array(['       &END OT',newline]) % ())
    fidout.write(np.array(['       &MIXING  T',newline]) % ())
    fidout.write(np.array(['         METHOD  DIRECT_P_MIXING',newline]) % ())
    fidout.write(np.array(['         ALPHA     3.000E-01',newline]) % ())
    fidout.write(np.array(['       &END MIXING',newline]) % ())
    fidout.write(np.array(['       &PRINT',newline]) % ())
    fidout.write(np.array(['         &RESTART_HISTORY  SILENT',newline]) % ())
    fidout.write(np.array(['           BACKUP_COPIES  ',num2str(EXOR + 2),newline]) % ())
    fidout.write(np.array(['           &EACH',newline]) % ())
    fidout.write(np.array(['           &END EACH',newline]) % ())
    fidout.write(np.array(['         &END RESTART_HISTORY',newline]) % ())
    fidout.write(np.array(['       &END PRINT',newline]) % ())
    fidout.write(np.array(['     &END SCF',newline]) % ())
    fidout.write(np.array(['     &QS',newline]) % ())
    fidout.write(np.array(['       EPS_DEFAULT     1.0E-10',newline]) % ())
    fidout.write(np.array(['       MAP_CONSISTENT  T',newline]) % ())
    fidout.write(np.array(['       EXTRAPOLATION  ASPC',newline]) % ())
    fidout.write(np.array(['       EXTRAPOLATION_ORDER  ',num2str(EXOR),newline]) % ())
    fidout.write(np.array(['       METHOD  GPW',newline]) % ())
    fidout.write(np.array(['     &END QS',newline]) % ())
    fidout.write(np.array(['     &MGRID',newline]) % ())
    fidout.write(np.array(['       NGRIDS  4',newline]) % ())
    fidout.write(np.array(['       CUTOFF     3.0000000000000000E+02',newline]) % ())
    fidout.write(np.array(['       &RS_GRID',newline]) % ())
    fidout.write(np.array(['         DISTRIBUTION_TYPE  REPLICATED',newline]) % ())
    fidout.write(np.array(['       &END RS_GRID',newline]) % ())
    fidout.write(np.array(['     &END MGRID',newline]) % ())
    fidout.write(np.array(['     &XC',newline]) % ())
    fidout.write(np.array(['       DENSITY_CUTOFF     1.0000000000000000E-10',newline]) % ())
    fidout.write(np.array(['       GRADIENT_CUTOFF     1.0000000000000000E-10',newline]) % ())
    fidout.write(np.array(['       TAU_CUTOFF     1.0000000000000000E-10',newline]) % ())
    fidout.write(np.array(['       &XC_FUNCTIONAL  NO_SHORTCUT',newline]) % ())
    fidout.write(np.array(['         &PBE  T',newline]) % ())
    fidout.write(np.array(['         &END PBE',newline]) % ())
    fidout.write(np.array(['       &END XC_FUNCTIONAL',newline]) % ())
    fidout.write(np.array(['       &VDW_POTENTIAL',newline]) % ())
    fidout.write(np.array(['         POTENTIAL_TYPE  PAIR_POTENTIAL',newline]) % ())
    fidout.write(np.array(['         &PAIR_POTENTIAL',newline]) % ())
    fidout.write(np.array(['           R_CUTOFF     8.0000000000000000E+00',newline]) % ())
    fidout.write(np.array(['           TYPE  DFTD3',newline]) % ())
    fidout.write(np.array(['           PARAMETER_FILE_NAME ./dftd3.dat',newline]) % ())
    fidout.write(np.array(['           REFERENCE_FUNCTIONAL PBE',newline]) % ())
    fidout.write(np.array(['           EPS_CN     1.0000000000000000E-02',newline]) % ())
    fidout.write(np.array(['           CALCULATE_C9_TERM  T',newline]) % ())
    fidout.write(np.array(['           REFERENCE_C9_TERM  T',newline]) % ())
    fidout.write(np.array(['           LONG_RANGE_CORRECTION  T',newline]) % ())
    fidout.write(np.array(['         &END PAIR_POTENTIAL',newline]) % ())
    fidout.write(np.array(['       &END VDW_POTENTIAL',newline]) % ())
    fidout.write(np.array(['     &END XC',newline]) % ())
    fidout.write(np.array(['     &REAL_TIME_PROPAGATION',newline]) % ())
    fidout.write(np.array(['       INITIAL_WFN  SCF_WFN',newline]) % ())
    fidout.write(np.array(['     &END REAL_TIME_PROPAGATION',newline]) % ())
    fidout.write(np.array(['   &END DFT',newline]) % ())
    fidout.write(np.array(['   &SUBSYS',newline]) % ())
    fidout.write(np.array(['     &CELL',newline]) % ())
    fidout.write(np.array([ABCOut,newline]) % ())
    fidout.write(np.array(['     &END CELL',newline]) % ())
    fidout.write(np.array(['     &COORD',newline]) % ())
    for i in np.arange(1,len(CoordOut)+1).reshape(-1):
        fidout.write(np.array([CoordOut(i,:),newline]) % ())
    
    fidout.write(np.array(['     &END COORD',newline]) % ())
    fidout.write(np.array(['     &VELOCITY',newline]) % ())
    for i in np.arange(1,len(VelOut)+1).reshape(-1):
        fidout.write(np.array([VelOut(i,:),newline]) % ())
    
    fidout.write(np.array(['     &END VELOCITY',newline]) % ())
    fidout.write(np.array(['     &KIND Pt',newline]) % ())
    fidout.write(np.array(['       BASIS_SET TZV-GTH-LDA-q18-very-confined',newline]) % ())
    fidout.write(np.array(['       ELEMENT Pt',newline]) % ())
    fidout.write(np.array(['       POTENTIAL GTH-PBE-q18',newline]) % ())
    fidout.write(np.array(['     &END KIND',newline]) % ())
    fidout.write(np.array(['     &KIND Ptb',newline]) % ())
    fidout.write(np.array(['       BASIS_SET TZV-GTH-LDA-q18-very-confined',newline]) % ())
    fidout.write(np.array(['       ELEMENT Pt',newline]) % ())
    fidout.write(np.array(['       POTENTIAL GTH-PBE-q18',newline]) % ())
    fidout.write(np.array(['     &END KIND',newline]) % ())
    fidout.write(np.array(['     &KIND Pts',newline]) % ())
    fidout.write(np.array(['       BASIS_SET TZV-GTH-LDA-q18-very-confined',newline]) % ())
    fidout.write(np.array(['       ELEMENT Pt',newline]) % ())
    fidout.write(np.array(['       POTENTIAL GTH-PBE-q18',newline]) % ())
    fidout.write(np.array(['     &END KIND',newline]) % ())
    fidout.write(np.array(['     &KIND Ptss',newline]) % ())
    fidout.write(np.array(['       BASIS_SET TZV-GTH-LDA-q18-very-confined',newline]) % ())
    fidout.write(np.array(['       ELEMENT Pt',newline]) % ())
    fidout.write(np.array(['       POTENTIAL GTH-PBE-q18',newline]) % ())
    fidout.write(np.array(['     &END KIND',newline]) % ())
    fidout.write(np.array(['     &KIND H',newline]) % ())
    fidout.write(np.array(['       BASIS_SET TZVP-GTH',newline]) % ())
    fidout.write(np.array(['       POTENTIAL GTH-PBE-q1',newline]) % ())
    fidout.write(np.array(['     &END KIND',newline]) % ())
    fidout.write(np.array(['     &KIND O',newline]) % ())
    fidout.write(np.array(['       BASIS_SET TZVP-GTH',newline]) % ())
    fidout.write(np.array(['       POTENTIAL GTH-PBE-q6',newline]) % ())
    fidout.write(np.array(['     &END KIND',newline]) % ())
    fidout.write(np.array(['     &KIND Na',newline]) % ())
    fidout.write(np.array(['       BASIS_SET TZVP-GTH',newline]) % ())
    fidout.write(np.array(['       POTENTIAL GTH-PBE-q9',newline]) % ())
    fidout.write(np.array(['     &END KIND',newline]) % ())
    fidout.write(np.array(['     &KIND Cl',newline]) % ())
    fidout.write(np.array(['       BASIS_SET TZVP-GTH',newline]) % ())
    fidout.write(np.array(['       POTENTIAL GTH-PBE-q7',newline]) % ())
    fidout.write(np.array(['     &END KIND',newline]) % ())
    # fprintf(fidout,['     &TOPOLOGY' newline]);
# fprintf(fidout,['      COORD_FILE_NAME ' OutFldr '.xyz' newline]);
# fprintf(fidout,['      COORDINATE XYZ' newline]);
# fprintf(fidout,['     &END TOPOLOGY' newline]);
    fidout.write(np.array(['   &END SUBSYS',newline]) % ())
    fidout.write(np.array([' &END FORCE_EVAL',newline]) % ())
    fidout.write(np.array(['',newline]) % ())
    fidout.close()