import numpy as np
    
def InputFromRestart(Base = None,OutFldr = None,AtomList = None,CellInfo = None,ParsedLines = None): 
    FileName = np.array([Base,OutFldr,'\',OutFldr,'-1.restart'])
    fidout = open(FileName,'w')
    fidout.write(np.array(['# CP2K input file created by Matt Darby, Imperial College London for system ',OutFldr,newline]) % ())
    fidout.write(np.array([' &GLOBAL',newline]) % ())
    fidout.write(np.array(['   PRINT_LEVEL  LOW',newline]) % ())
    fidout.write(np.array(['   PROJECT_NAME ',OutFldr,newline]) % ())
    fidout.write(np.array(['   RUN_TYPE  ENERGY_FORCE',newline]) % ())
    fidout.write(np.array(['   WALLTIME 1600',newline]) % ())
    fidout.write(np.array([' &END GLOBAL',newline]) % ())
    fidout.write(np.array([' &FORCE_EVAL',newline]) % ())
    fidout.write(np.array(['   METHOD  QS',newline]) % ())
    fidout.write(np.array(['   &DFT',newline]) % ())
    fidout.write(np.array(['     BASIS_SET_FILE_NAME ./GTH_BASIS_SETS',newline]) % ())
    fidout.write(np.array(['     POTENTIAL_FILE_NAME ./GTH_POTENTIALS',newline]) % ())
    fidout.write(np.array(['     &SCF',newline]) % ())
    fidout.write(np.array(['       SCF_GUESS  RESTART',newline]) % ())
    fidout.write(np.array(['       EPS_SCF     1.0E-05',newline]) % ())
    fidout.write(np.array(['       MAX_SCF  800',newline]) % ())
    fidout.write(np.array(['       EPS_DIIS     1.0E-01',newline]) % ())
    fidout.write(np.array(['       &OT  T',newline]) % ())
    fidout.write(np.array(['         MINIMIZER  DIIS',newline]) % ())
    fidout.write(np.array(['         SAFE_DIIS  F',newline]) % ())
    fidout.write(np.array(['         N_HISTORY_VEC  7',newline]) % ())
    fidout.write(np.array(['         STEPSIZE     1.0000000000000001E-02',newline]) % ())
    fidout.write(np.array(['         PRECONDITIONER  FULL_SINGLE_INVERSE',newline]) % ())
    fidout.write(np.array(['         ENERGY_GAP     1.0000000000000000E-03',newline]) % ())
    fidout.write(np.array(['       &END OT',newline]) % ())
    fidout.write(np.array(['       &MIXING  T',newline]) % ())
    fidout.write(np.array(['         METHOD  DIRECT_P_MIXING',newline]) % ())
    fidout.write(np.array(['         ALPHA     3.000E-01',newline]) % ())
    fidout.write(np.array(['       &END MIXING',newline]) % ())
    fidout.write(np.array(['     &END SCF',newline]) % ())
    fidout.write(np.array(['     &PRINT',newline]) % ())
    fidout.write(np.array(['         &PDOS',newline]) % ())
    fidout.write(np.array(['           NLUMO 1000',newline]) % ())
    fidout.write(np.array(['         &END PDOS',newline]) % ())
    fidout.write(np.array(['         &V_HARTREE_CUBE',newline]) % ())
    fidout.write(np.array(['           STRIDE 1',newline]) % ())
    fidout.write(np.array(['         &END V_HARTREE_CUBE',newline]) % ())
    fidout.write(np.array(['         &TOT_DENSITY_CUBE',newline]) % ())
    fidout.write(np.array(['           STRIDE 1',newline]) % ())
    fidout.write(np.array(['         &END TOT_DENSITY_CUBE',newline]) % ())
    fidout.write(np.array(['         &E_DENSITY_CUBE',newline]) % ())
    fidout.write(np.array(['           STRIDE 1',newline]) % ())
    fidout.write(np.array(['         &END E_DENSITY_CUBE',newline]) % ())
    fidout.write(np.array(['     &END PRINT',newline]) % ())
    fidout.write(np.array(['     &QS',newline]) % ())
    fidout.write(np.array(['       EPS_DEFAULT     1.0E-10',newline]) % ())
    fidout.write(np.array(['       EXTRAPOLATION  ASPC',newline]) % ())
    fidout.write(np.array(['       EXTRAPOLATION_ORDER  0',newline]) % ())
    fidout.write(np.array(['       METHOD  GPW',newline]) % ())
    fidout.write(np.array(['     &END QS',newline]) % ())
    fidout.write(np.array(['     &MGRID',newline]) % ())
    fidout.write(np.array(['       NGRIDS  4',newline]) % ())
    fidout.write(np.array(['       CUTOFF     3.0000000000000000E+02',newline]) % ())
    fidout.write(np.array(['       &RS_GRID',newline]) % ())
    fidout.write(np.array(['         DISTRIBUTION_TYPE  REPLICATED',newline]) % ())
    fidout.write(np.array(['       &END RS_GRID',newline]) % ())
    fidout.write(np.array(['     &END MGRID',newline]) % ())
    fidout.write(np.array(['     &XC',newline]) % ())
    fidout.write(np.array(['       DENSITY_CUTOFF     1.0000000000000000E-10',newline]) % ())
    fidout.write(np.array(['       GRADIENT_CUTOFF     1.0000000000000000E-10',newline]) % ())
    fidout.write(np.array(['       TAU_CUTOFF     1.0000000000000000E-10',newline]) % ())
    fidout.write(np.array(['       &XC_FUNCTIONAL  NO_SHORTCUT',newline]) % ())
    fidout.write(np.array(['         &PBE  T',newline]) % ())
    fidout.write(np.array(['         &END PBE',newline]) % ())
    fidout.write(np.array(['       &END XC_FUNCTIONAL',newline]) % ())
    fidout.write(np.array(['       &VDW_POTENTIAL',newline]) % ())
    fidout.write(np.array(['         POTENTIAL_TYPE  PAIR_POTENTIAL',newline]) % ())
    fidout.write(np.array(['         &PAIR_POTENTIAL',newline]) % ())
    fidout.write(np.array(['           R_CUTOFF     8.0000000000000000E+00',newline]) % ())
    fidout.write(np.array(['           TYPE  DFTD3',newline]) % ())
    fidout.write(np.array(['           PARAMETER_FILE_NAME ./dftd3.dat',newline]) % ())
    fidout.write(np.array(['           REFERENCE_FUNCTIONAL PBE',newline]) % ())
    fidout.write(np.array(['           EPS_CN     1.0000000000000000E-02',newline]) % ())
    fidout.write(np.array(['           CALCULATE_C9_TERM  T',newline]) % ())
    fidout.write(np.array(['           REFERENCE_C9_TERM  T',newline]) % ())
    fidout.write(np.array(['           LONG_RANGE_CORRECTION  T',newline]) % ())
    fidout.write(np.array(['         &END PAIR_POTENTIAL',newline]) % ())
    fidout.write(np.array(['       &END VDW_POTENTIAL',newline]) % ())
    fidout.write(np.array(['     &END XC',newline]) % ())
    fidout.write(np.array(['     &REAL_TIME_PROPAGATION',newline]) % ())
    fidout.write(np.array(['       INITIAL_WFN  SCF_WFN',newline]) % ())
    fidout.write(np.array(['     &END REAL_TIME_PROPAGATION',newline]) % ())
    fidout.write(np.array(['   &END DFT',newline]) % ())
    fidout.write(np.array(['   &SUBSYS',newline]) % ())
    fidout.write(np.array(['     &COORD',newline]) % ())
    for i in np.arange(1,len(AtomList)+1).reshape(-1):
        fidout.write(np.array([ParsedLines[AtomList(i)],newline]) % ())
    
    fidout.write(np.array(['     &END COORD',newline]) % ())
    for i in np.arange(1,len(CellInfo)+1).reshape(-1):
        fidout.write(np.array([ParsedLines[CellInfo(i)],newline]) % ())
    
    fidout.write(np.array(['     &KIND Pt',newline]) % ())
    fidout.write(np.array(['       BASIS_SET TZV-GTH-LDA-q18-very-confined',newline]) % ())
    fidout.write(np.array(['       ELEMENT Pt',newline]) % ())
    fidout.write(np.array(['       POTENTIAL GTH-PBE-q18',newline]) % ())
    fidout.write(np.array(['     &END KIND',newline]) % ())
    fidout.write(np.array(['     &KIND PtE',newline]) % ())
    fidout.write(np.array(['       BASIS_SET TZV-GTH-LDA-q18-very-confined',newline]) % ())
    fidout.write(np.array(['       ELEMENT Pt',newline]) % ())
    fidout.write(np.array(['       POTENTIAL GTH-PBE-q18',newline]) % ())
    fidout.write(np.array(['     &END KIND',newline]) % ())
    fidout.write(np.array(['     &KIND Ptb',newline]) % ())
    fidout.write(np.array(['       BASIS_SET TZV-GTH-LDA-q18-very-confined',newline]) % ())
    fidout.write(np.array(['       ELEMENT Pt',newline]) % ())
    fidout.write(np.array(['       POTENTIAL GTH-PBE-q18',newline]) % ())
    fidout.write(np.array(['     &END KIND',newline]) % ())
    fidout.write(np.array(['     &KIND Pts',newline]) % ())
    fidout.write(np.array(['       BASIS_SET TZV-GTH-LDA-q18-very-confined',newline]) % ())
    fidout.write(np.array(['       ELEMENT Pt',newline]) % ())
    fidout.write(np.array(['       POTENTIAL GTH-PBE-q18',newline]) % ())
    fidout.write(np.array(['     &END KIND',newline]) % ())
    fidout.write(np.array(['     &KIND Ptss',newline]) % ())
    fidout.write(np.array(['       BASIS_SET TZV-GTH-LDA-q18-very-confined',newline]) % ())
    fidout.write(np.array(['       ELEMENT Pt',newline]) % ())
    fidout.write(np.array(['       POTENTIAL GTH-PBE-q18',newline]) % ())
    fidout.write(np.array(['     &END KIND',newline]) % ())
    fidout.write(np.array(['     &KIND H',newline]) % ())
    fidout.write(np.array(['       BASIS_SET TZVP-GTH',newline]) % ())
    fidout.write(np.array(['       POTENTIAL GTH-PBE-q1',newline]) % ())
    fidout.write(np.array(['     &END KIND',newline]) % ())
    fidout.write(np.array(['     &KIND O',newline]) % ())
    fidout.write(np.array(['       BASIS_SET TZVP-GTH',newline]) % ())
    fidout.write(np.array(['       POTENTIAL GTH-PBE-q6',newline]) % ())
    fidout.write(np.array(['     &END KIND',newline]) % ())
    fidout.write(np.array(['     &KIND F',newline]) % ())
    fidout.write(np.array(['       BASIS_SET TZVP-GTH',newline]) % ())
    fidout.write(np.array(['       POTENTIAL GTH-PBE-q7',newline]) % ())
    fidout.write(np.array(['     &END KIND',newline]) % ())
    fidout.write(np.array(['   &END SUBSYS',newline]) % ())
    fidout.write(np.array([' &END FORCE_EVAL',newline]) % ())
    fidout.write(np.array(['',newline]) % ())
    fidout.close()
    copyfile(FileName,np.array([Base,OutFldr,'\',OutFldr,'.inp']))
    return