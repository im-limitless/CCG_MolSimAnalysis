% there is a bug here where if "AtomList" comes from readandparsexyz the
% line (29) if strcmpi(AtomList(i,:), Kinds(k,:)) doesnt work

function [Q, Qnet, StepNum] = extractBaderCharges(fldrname, flname, Atoms, AtomList, Kinds, PP)
Bader = readmatrix([fldrname flname], 'headerlines', 2, 'FileType', 'Text');
% fid = fopen([fldrname flname]);
%     
    % % find the step number from the Bader file append
    StepIndx = find(flname == '_');
    StepIndx = [StepIndx find(flname == '.')];
    StepNum = str2num(flname(StepIndx(1)+1:StepIndx(2)-1));
    
    % % Extract the raw Bader charge, Q
    Q = Bader(1:end-4,5);
    
    % % Loop over the atom types/number of each type & convert raw to net charges
    TotalCharge = zeros(length(Atoms),1);
    NetCharge = zeros(length(Atoms),1);
%     StndElec = zeros(length(Atoms),1);
%     StockAtoms = {'F' 'H' 'O' 'Pt' 'Si' 'S' 'W'};
%     Elecrons = [7; 1; 6; 18; 4; 6; 14];
    nAtoms=zeros(length(AtomList),1);
    for i = 1:size(AtomList,1)
        for j = 1:size(Atoms,1)
            if  contains(AtomList(i,:), Atoms(j,:))
                TotalCharge(j,1) = Bader(j,5);
                Indx(j,i) = 1;
                for k = 1:size(Kinds,1)
                    if strcmpi(AtomList(i,:), Kinds(k,:))
                        nAtoms(i,1) = nAtoms(i,1)+1;
                        NetCharge(j,1) = PP(k);
                    end
                end
            end
        end
    end
    
%     PtIndxs = find(ismember(AtomList, 'Pt'));
%     PtIndxs = PtIndxs(PtIndxs < length(AtomList)+1);
%     
    
    % NetCharge = (NetCharge-TotalCharge).*Indx; 
    %% Older formula: would calculate excess electrons but have opposite sign convention forCharge
    NetCharge = (NetCharge-TotalCharge).*Indx;
    Qnet = sum(NetCharge,2);
      
    return