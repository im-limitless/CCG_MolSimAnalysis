clear all;  clc;
close all;

%% %%%%%%%%%%%%%% Data collections %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

BaseFldr = '/Users/rashidal-heidous/Google Drive (local)/Academic Career (Current:local)/UK Postgrad Journey (ICL)/PhD/PhD/cp2k jobs/Jobs/ARCHER2/AIMD/Grand_Challenge_2/Phase_diagram_sys/';
system = 'Al_water';
Trajectory = 'Al_water_153000to163000_1000step.xyz';


fldrname = [BaseFldr system '/Bader_Analysis/'];
ACFfiles = dir([fldrname 'ACF_*.dat']);

DoubleAnalType = 'MassDensity';
% DoubleAnalType = 'Radial';

% % Call function to find ABC vectors from .inp file
ABC = getABCvectors(BaseFldr, system);

% % get the names of atoms from original xyz input file
[Atoms, AtomList, Indx, Indxfns, Kinds, Elements, PP] = getAtomInfoFromInput(BaseFldr, system);

% % Read the Bader charge "ACF" files and extract the raw charge Q/net charge Qnet
Q = zeros(length(Atoms),length(ACFfiles));
Qnet = zeros(length(Atoms),length(ACFfiles));

for n = 1:length(ACFfiles)
    [Q(:,n), Qnet(:,n), StepNum(n)] = extractBaderCharges(fldrname, ACFfiles(n).name, Atoms, AtomList,Kinds,PP);
end

% % Find indices of all "Al*" atoms
if size(AtomList,1) > 1
    AlList = find(ismember(AtomList, 'Al'));
    AlList = AlList(AlList < length(AtomList)+1);
    Indxfns = fieldnames(Indx);
    Indx.Al_All = [];
    for ii = 1:length(AlList)
        Indx.Al_All = [Indx.Al_All; Indx.(Indxfns{AlList(ii)})];
    end
else
    Indxfns = fieldnames(Indx);
    AlList = 1;
    Indx.Al_All = Indx.(Indxfns{1});
end

% % parse coordinates of atoms along trajectory and wrap into cell
[xyz, XYZ, ~, ~, ~, nAtoms, startConfig, nConfigs, StepNum_Traj] = ReadAndParsexyz_new(BaseFldr, system, Trajectory, ABC, [0 0 0]);
XYZ = wrapXYZ(XYZ, ABC);

% % compute radial functions for OH, OF and HF
RadFunOH = cell(nConfigs,1);
% RadFunFH = cell(nConfigs,1);
% RadFunFO = cell(nConfigs,1);
RadFunAlO = cell(nConfigs,1);

DistOH = cell(1,nConfigs);
% DistFH = cell(1,nConfigs);
% DistFO = cell(1,nConfigs);
DistAlO = cell(1,nConfigs);


for snap = startConfig:nConfigs
    XYZ_snap = zeros(size(XYZ,2), size(XYZ,3));
    XYZ_snap(:,:) = XYZ(snap,:,:);

    [VecAlO, DistAlO{snap}] = GetAtomCorrelation(XYZ_snap, [Indx.Al1], Indx.O, ABC);
%     [VecAlO, DistAlO{snap}] = GetAtomCorrelation(XYZ_snap, [Indx.Al11], Indx.O, ABC);
%     [VecAlO11, DistAlO11{snap}] = GetAtomCorrelation(XYZ_snap, [Indx.Al11], Indx.O, ABC);
%     [VecAlO12, DistAlO12{snap}] = GetAtomCorrelation(XYZ_snap, [Indx.Al12], Indx.O, ABC);
    [VecOH, DistOH] = GetAtomCorrelation(XYZ_snap, Indx.O, Indx.H, ABC);
%     [VecFH, DistFH] = GetAtomCorrelation(XYZ_snap, Indx.F, Indx.H, ABC);
%     [VecFO, DistFO] = GetAtomCorrelation(XYZ_snap, Indx.F, Indx.O, ABC);
    [VecAl1_Al1, DistAl1_Al1{snap}] = GetAtomCorrelation(XYZ_snap, [Indx.Al1], Indx.Al1, ABC); 
    [VecAl1_Al2, DistAl1_Al2{snap}] = GetAtomCorrelation(XYZ_snap, [Indx.Al1], Indx.Al2, ABC);
    [VecAl2_Alb, DistAl2_Alb{snap}] = GetAtomCorrelation(XYZ_snap, [Indx.Al2], Indx.Alb, ABC);
    
    RadFunOH{snap} = reshape(DistOH, [numel(DistOH), 1]);
% %     RadFunFH{snap} = reshape(DistFH, [numel(DistFH), 1]);
% %     RadFunFO{snap} = reshape(DistFO, [numel(DistFO), 1]);
    RadFunAlO{snap} = reshape(DistAlO{snap}, [numel(DistAlO{snap}), 1]);
    RadFunAl1_Al1{snap} = reshape(DistAl1_Al1{snap}, [numel(DistAl1_Al1{snap}), 1]);
    RadFunAl1_Al2{snap} = reshape(DistAl1_Al2{snap}, [numel(DistAl1_Al2{snap}), 1]);
    RadFunAl2_Alb{snap} = reshape(DistAl2_Alb{snap}, [numel(DistAl2_Alb{snap}), 1]);

end

MinimaOH = RadialDistribution(RadFunOH, ABC, ['O'; 'H'], 1);
% % MinimaFH = RadialDistribution(RadFunFH, ABC, ['F'; 'H'], 0);
% % MinimaFO = RadialDistribution(RadFunFO, ABC, ['F'; 'O'], 0);
MinimaAlO = RadialDistribution(RadFunAlO, ABC, ['Al'; 'O '], 1);
MinimaAl1_Al1 = RadialDistribution(RadFunAl1_Al1, ABC, ['Al1'; 'Al1'], 1);
MinimaAl1_Al2 = RadialDistribution(RadFunAl1_Al2, ABC, ['Al1'; 'Al2'], 1);
MinimaAl2_Alb = RadialDistribution(RadFunAl2_Alb, ABC, ['Al2'; 'Alb'], 1);


if strcmp(DoubleAnalType, 'MassDensity')
    
    disp('Determining water layering from mass density profile...');
    
    %%% get the O atom distribution and corresponding indices of DL atoms (both O and H)
    [Dens_O, Dens_H, ~, ~, z] = getDensityProfile(xyz, ABC);
    %change getwaterlayerIndices to the name of the new function (same name
    %but add persnap at the end) +  [same same minimaZ] = same
    [FirstLayerIndx, SecondLayerIndx] = getWaterLayerIndicesPerSnap_new(Indx, XYZ, Dens_O, z);
    
    
    for i = startConfig:nConfigs
        DL1st{i} = [FirstLayerIndx{i}];
        DL2nd{i} = [SecondLayerIndx{i}];
        nonDL{i} = setdiff(Indx.O, [DL1st{i}; DL2nd{i}]);
        DL1st_AlO{i} = [];
     
        
        XYZ_snap = zeros(size(XYZ,2), size(XYZ,3));
        XYZ_snap(:,:) = XYZ(i,:,:);
        [~, DistOH1stWL] = GetAtomCorrelation(XYZ_snap, DL1st{i}, Indx.H, ABC);
        [~, DistOH2ndWL] = GetAtomCorrelation(XYZ_snap, DL2nd{i}, Indx.H, ABC);
        [~, DistOHnonDL] = GetAtomCorrelation(XYZ_snap, nonDL{i}, Indx.H, ABC);
        [~, DistOAl1stWL] = GetAtomCorrelation(XYZ_snap, DL1st{i}, Indx.Al1, ABC); %This is the distribution of 1WL "O" and all Al1
 
        for j = 1:length(DL1st{i})
            DL1st{i} = [DL1st{i}; Indx.H(find(DistOH1stWL(:,j)<MinimaOH(1)))];
        end
        
        for j = 1:length(DL2nd{i})
            DL2nd{i} = [DL2nd{i}; Indx.H(find(DistOH2ndWL(:,j)<MinimaOH(1)))];
        end
        
        for j = 1:length(nonDL{i})
            nonDL{i} = [nonDL{i}; Indx.H(find(DistOHnonDL(:,j)<MinimaOH(1)))];
        end
% % DL1st_AlO finds the "Al" that are connected to the "O" of the 1st WL in
% the DL (i.e. the "O" in the DL1st or the indices in the FirstLayerIndx)
         for j = 1:length(FirstLayerIndx{i})
            DL1st_AlO{i} = [DL1st_AlO{i}; Indx.Al1(find(DistOAl1stWL(:,j)<=MinimaAlO(1)))];
        end
    end

% % [On the above] to get the neighboring Al atoms to the ones in DL1st_AlO we do the
% following:
% Note [Mar 4 '24 @21:49 GMT]: DL1st_nAlO (in the loop below) seems to include BOTH the
% DL1st_AlO and its neighbors! there are many dublicates as well 


% % [Below] This is collecting the Al2 nearest neighbours using the bonded
% Al1
for i = startConfig:nConfigs
        DL1st_nAlO{i} = [];
        DL1st_Al2_nAlO{i} = [];

        XYZ_snap = zeros(size(XYZ,2), size(XYZ,3));
        XYZ_snap(:,:) = XYZ(i,:,:);
        [~, Dist_n_OAl1stWL] = GetAtomCorrelation(XYZ_snap, DL1st_AlO{i}, Indx.Al1, ABC); %This is the distribution of the Al1 bonded to 1WL "O" and all Al1
        [~, Dist_n_Al2_OAl1stWL] = GetAtomCorrelation(XYZ_snap, DL1st_AlO{i}, Indx.Al2, ABC); %This is the distribution of the Al1 bonded to 1WL "O" and all Al2

        for j = 1:length( DL1st_AlO{i})
            DL1st_nAlO{i} = [DL1st_nAlO{i}; Indx.Al1(find(Dist_n_OAl1stWL(:,j)<=MinimaAl1_Al1(1)))]; %This captures all Al1 bonded to 1WL and its Al1 neighbours
            DL1st_Al2_nAlO{i} = [DL1st_Al2_nAlO{i}; Indx.Al2(find(Dist_n_Al2_OAl1stWL(:,j)<=MinimaAl1_Al2(1)))]; %This captures all Al2 neighbours to Al1 bonded to 1WL
        end
end

% % [Below] This is collecting the Alb nearest neighbours of the Al2 nearest neighbours collected above 
for i = startConfig:nConfigs
        DL1st_Alb_nAl2O{i} = [];

        XYZ_snap = zeros(size(XYZ,2), size(XYZ,3));
        XYZ_snap(:,:) = XYZ(i,:,:);
        [~, Dist_n_Alb_OAl1stWL] = GetAtomCorrelation(XYZ_snap, DL1st_Al2_nAlO{i}, Indx.Alb, ABC); %This is the distribution of the Al2 nearest neighbours to 1WL "O" and all Alb

        for j = 1:length(DL1st_Al2_nAlO{i})
            DL1st_Alb_nAl2O{i} = [DL1st_Alb_nAl2O{i}; Indx.Alb(find(Dist_n_Alb_OAl1stWL(:,j)<=MinimaAl2_Alb(1)))]; %This captures all Alb neighbours to Al2 nearest neighbours to 1WL
        end
end

% % Getting rid of dublicates in the fllowing variables:
for i = startConfig:nConfigs
    DL1st_nAlO{i}=unique(DL1st_nAlO{i});
    DL1st_Al2_nAlO{i}=unique(DL1st_Al2_nAlO{i});
    DL1st_Alb_nAl2O{i}=unique(DL1st_Alb_nAl2O{i});
end


prompt = "Do you want to initiate single 1st WL investigation? ('y'/'n'): ";
END = input(prompt);
if END == 'y'
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Special Investigation %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% We are only going to pick one 1st WL molecule and all its nearest
% neighbours (Al1 and Al2) and then investigate their Bader charge 
% 
% NOTE: SINGLE molecule, in ONE snapshot
i=7; %Snapshot
% i=1; %Snapshot

Sum_S_Q=[];
Collect_S_all_Single1WL=[];
Collect_S_MeanQnet=[];
%length(FirstLayerIndx{i}(:))

for n = 1:length(FirstLayerIndx{i}(:))
% for n = 14  %% -NOTE: when usign this comment the above line and vice versa- Insert the value of a certain
% water of interest (i.e. water ('O') number 12 (n=12) in the
% FirstLayerIndex.
Sum_S_Q{n}=[];


Single1WL= FirstLayerIndx{i}(n,:); % "O" atom (n,:) in snapshot "i" 


for snap = startConfig:nConfigs
    XYZ_snap = zeros(size(XYZ,2), size(XYZ,3));
    XYZ_snap(:,:) = XYZ(snap,:,:);

    [Vec1stWL_2ndWL, Dist1stWL_2ndWL{snap}] = GetAtomCorrelation(XYZ_snap, FirstLayerIndx{snap}(:), SecondLayerIndx{snap}(:),  ABC);
    RadFunSingle1WL_2ndWL{snap} = reshape(Dist1stWL_2ndWL{snap}, [numel(Dist1stWL_2ndWL{snap}), 1]);
end
MinimaSingle1WL_2ndWL = RadialDistribution(RadFunSingle1WL_2ndWL, ABC, ['Single1WL'; '2ndWL    '], 0);  %vertcat error related to matrix length comes from the names (they have to be equal in length)



XYZ_snap = zeros(size(XYZ,2), size(XYZ,3));
XYZ_snap(:,:) = XYZ(i,:,:);

[~, S_DistO2ndWL] = GetAtomCorrelation(XYZ_snap, Single1WL, SecondLayerIndx{i}(:), ABC);
for j = 1:length(Single1WL)
    S_DLSingle1WL_2ndWL = [SecondLayerIndx{i}(find(S_DistO2ndWL(:,j)<=MinimaSingle1WL_2ndWL(1)))]; %The 2nd WL "O" closest to the Single1WL
end

[~, S_DistOH2ndWL] = GetAtomCorrelation(XYZ_snap,S_DLSingle1WL_2ndWL, Indx.H, ABC);
for j = 1:length(S_DLSingle1WL_2ndWL)
            S_DLSingle1WL_2ndWL = [S_DLSingle1WL_2ndWL; Indx.H(find(S_DistOH2ndWL(:,j)<MinimaOH(1)))]; %Adding "H" to the 2nd WL "O" closest to the Single1WL
end

[~, S_DistOH1stWL] = GetAtomCorrelation(XYZ_snap, Single1WL, Indx.H, ABC);
[~, S_DistOAl1stWL] = GetAtomCorrelation(XYZ_snap, Single1WL, Indx.Al1, ABC); %This is the distribution of Single1WL 1WL "O" and all its Al1

Single1WL = [Single1WL; Indx.H(find(S_DistOH1stWL(:,:)<MinimaOH(1)))]; %The 1WL complete molecule 
S_DL1st_AlO = [Indx.Al1(find(S_DistOAl1stWL(:,:)<=MinimaAlO(1)))]; %The Al1 bonded to Single1WL

[~, S_Dist_n_OAl1stWL] = GetAtomCorrelation(XYZ_snap, S_DL1st_AlO, Indx.Al1, ABC); %This is the distribution of the Al1 bonded to 1WL "O" and all Al1
[~, S_Dist_n_Al2_OAl1stWL] = GetAtomCorrelation(XYZ_snap, S_DL1st_AlO, Indx.Al2, ABC); %This is the distribution of the Al1 bonded to 1WL "O" and all Al2


S_DL1st_nAlO = [Indx.Al1(find(S_Dist_n_OAl1stWL(:,:)<=MinimaAl1_Al1(1)))]; %This captures all Al1 bonded to 1WL and its Al1 neighbours
S_DL1st_Al2_nAlO = [Indx.Al2(find(S_Dist_n_Al2_OAl1stWL(:,:)<=MinimaAl1_Al2(1)))]; %This captures all Al2 neighbours to Al1 bonded to 1WL

[~, S_Dist_n_Alb_OAl1stWL] = GetAtomCorrelation(XYZ_snap, S_DL1st_Al2_nAlO, Indx.Alb, ABC); %This is the distribution of the Al2 nearest neighbours to 1WL "O" and all Alb
for j = 1:length(S_DL1st_Al2_nAlO)
    S_DL1st_Alb_nAl2O = [Indx.Alb(find(S_Dist_n_Alb_OAl1stWL(:,j)<=MinimaAl2_Alb(1)))]; %This captures all Alb neighbours to Al2 nearest neighbours to 1WL
end

S_all_Single1WL=[Single1WL;S_DLSingle1WL_2ndWL;S_DL1st_nAlO;S_DL1st_Al2_nAlO;S_DL1st_Alb_nAl2O]; % The singel 1st WL and all its nearest neighbours in 2ndWL, Al1, Al2, and Alb
S_Als_Single1WL=[S_DL1st_nAlO;S_DL1st_Al2_nAlO;S_DL1st_Alb_nAl2O]; % nearest neighbours in Al1, Al2, and Alb

% CHARGES %%%
S_Single1WL_MeanQnet = mean(Qnet(Single1WL,i),2); %Only the Single1WL 
S_Single1WL_2ndWL_MeanQnet = mean(Qnet(S_DLSingle1WL_2ndWL,i),2); %Only the closest 2ndWL to Single1WL 
S_S_DL1st_AlO_MeanQnet = mean(Qnet(S_DL1st_AlO,i),2); %Only the bonded Al
S_S_DL1st_nAlO_MeanQnet = mean(Qnet(S_DL1st_nAlO,i),2); %Only the bonded Al + Al1s nearest neighbours
S_S_DL1st_Al2_nAlO_MeanQnet = mean(Qnet(S_DL1st_Al2_nAlO,i),2); %Only the Al2s nearest neighbours
S_S_DL1st_Alb_nAl2O_MeanQnet = mean(Qnet(S_DL1st_Alb_nAl2O,i),2); %Only the Albs nearest neighbours
S_Als_MeanQnet = mean(Qnet(S_Als_Single1WL,i),2); %Only the Als (boneded + nearest neighbours)

S_MeanQnet = mean(Qnet(S_all_Single1WL,i),2); %All (note the loop below)
%% Note: to view each "H" and "O" bader charge in the heat map individually turn off the next two loops
%%%%%%%%%%%%%%%%%% Ave Bader per water %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% Making the H2O molecule has a uniform charge for the heat map (1stWL)
for h=1:length(S_Single1WL_MeanQnet)
    S_MeanQnet(h)=sum(mean(Qnet(Single1WL,i),2));
end
%%%%
% Making the H2O molecule has a uniform charge for the heat map (2ndWL)
for h=1:length(S_Single1WL_2ndWL_MeanQnet)
    S_MeanQnet(length(S_Single1WL_MeanQnet)+h)=sum(mean(Qnet(S_DLSingle1WL_2ndWL,i),2));
end
%% %%%%%%%%%%%%%%%%%% End Ave Bader per water %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Bader3DCharge(XYZ_snap(S_all_Single1WL,:), ABC, S_MeanQnet);  


Mat_Sum_S_Q=cell2mat(Sum_S_Q); %matrix Sum_S_Q

%% Plotting the Sum_S_Q vs StepNum_Traj
figure
box on
hold on
xlabel('Time (ps)');
ylabel('Total Excess Charge (|e|)');
title(['Total Excess Bader charge for Single1WL molecule and its surroundings in ' system], 'interpreter', 'none')
Col=colorcube(width(Mat_Sum_S_Q)); %Produce a color map with the size of "width(Mat_Sum_S_Q)" using colormap named "colorcube" for others check the manual doc on colormap
Legend=cell(width(Mat_Sum_S_Q),1);
for iii =1:width(Mat_Sum_S_Q)
plot(StepNum/2000, -Mat_Sum_S_Q(:,iii), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor',Col(iii,:));
% plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(Mat_Sum_S_Q(iii,1:end)) -mean(Mat_Sum_S_Q(iii,1:end))], '--', 'color', C(iii,:));
AveStr = [' Traj. Ave. = ' num2str(mean(-Mat_Sum_S_Q(1:end,iii)), '%.2f') '\pm'  num2str(std(-Mat_Sum_S_Q(1:end,iii)), '%.2f')];
Legend{iii}= strcat('1WL Water  ',num2str(iii),AveStr);
end
legend(Legend)
hold off

%% %%%%%%%%%%%%%%%%%%%%%%% All 1st W
%%Collecting charges and Indices for all chemisorbed H2O and their sphere of influence %%
Collect_S_all_Single1WL=[Collect_S_all_Single1WL; S_all_Single1WL];
Collect_S_MeanQnet=[Collect_S_MeanQnet;S_MeanQnet];
%%%%%%%%%%%%%%%%%%%%%%%%%% END Collecting ...%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

for ii=1:length(ACFfiles)
    Sum_S_Q{n} = [Sum_S_Q{n}; sum(mean(Qnet(S_all_Single1WL,ii),2))]; %Collects the total charge of all accross all ACF files/sampled snapshots
end

end

%%%%%%%%%%%%%%% Collected Single 1st WLs and all Als %%%%%%%%%%%%%%%%%%%%%
Collect_S_all_Single1WL=[Collect_S_all_Single1WL; Indx.Al_All];
MeanQnet_Als= mean(Qnet(Indx.Al_All,i),2);
Collect_S_MeanQnet=[Collect_S_MeanQnet;MeanQnet_Als];
Bader3DCharge(XYZ_snap(Collect_S_all_Single1WL,:), ABC, Collect_S_MeanQnet);
%%%%%%%%%%%%%%%% End Collected Single 1st WLs and all Als %%%%%%%%%%%%%%%%




%% Collect_S_MeanQnet vs Z

Z_Collect_S_all_Single1WL=XYZ_snap(Collect_S_all_Single1WL,3);

Collect_S_Z_Qnet_Mat=[Z_Collect_S_all_Single1WL,Collect_S_MeanQnet];
Ord_Z_Collect_S_Z_Mat=sortrows(Collect_S_Z_Qnet_Mat,1);

figure
box on
hold on
xlabel('Z (Ang)');
ylabel('Total Excess Charge (|e|)');
title(['Total Excess Bader charge for Single1WL molecule and its surroundings & ALs in ' system], 'interpreter', 'none')
c=linspace(1,10,length(Z_Collect_S_all_Single1WL));
sz=25;
% scatter(Z_Collect_S_all_Single1WL, Collect_S_MeanQnet,sz,c,"filled");
scatter(Ord_Z_Collect_S_Z_Mat(:,1), Ord_Z_Collect_S_Z_Mat(:,2),sz,c,"filled");
plot(Ord_Z_Collect_S_Z_Mat(:,1), Ord_Z_Collect_S_Z_Mat(:,2));
% colororder("reef")
% colorbar
hold off


%% %%%%%%%%%% For singleWL1st vs nonDL H2O charge %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%nonDL H2O
S_DL1st{i} = [FirstLayerIndx{i}];
S_DL2nd{i} = [SecondLayerIndx{i}];
S_nonDL{i} = setdiff(Indx.O, [S_DL1st{i}; S_DL2nd{i}]);
[~, S_DistOHnonDL] = GetAtomCorrelation(XYZ_snap, S_nonDL{i}, Indx.H, ABC);
Single_nonDL = [S_nonDL{i}(1,:); Indx.H(find(S_DistOHnonDL(:,1)<MinimaOH(1)))];

Single_nonDL_Qnet= mean(Qnet(Single_nonDL,i),2);

%single H2O for 1st WL

S_Single1WL= FirstLayerIndx{i}(1,:);
[~, Single_DistOH1stWL] = GetAtomCorrelation(XYZ_snap, S_Single1WL, Indx.H, ABC);
S_Single1WL = [S_Single1WL; Indx.H(find(Single_DistOH1stWL(:,:)<MinimaOH(1)))];

S_Single1WL_Qnet=mean(Qnet(S_Single1WL,i),2);

%Show 3D heat map
% Making the H2O molecule has a uniform charge for the heat map (1stWL&nonDL)
for S_h=1:length(Single_nonDL_Qnet)
    Single_nonDL_Qnet(S_h)=sum(mean(Qnet(Single_nonDL,i),2));
end

for S_h=1:length(S_Single1WL_Qnet)
    S_Single1WL_Qnet(S_h)=sum(mean(Qnet(S_Single1WL,i),2));
end

Single_1WL_nonDL_Qnet=[Single_nonDL_Qnet;S_Single1WL_Qnet];
Single_1WL_nonDL=[Single_nonDL;S_Single1WL];

Bader3DCharge(XYZ_snap(Single_1WL_nonDL,:), ABC, Single_1WL_nonDL_Qnet);
%% %%%%%%%%%% END For singleWL1st vs nonDL H2O charge %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% End Special Investigation %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end

    
elseif strcmp(DoubleAnalType, 'Radial')
    
    disp('Determining water layering from radial distribution...');
    
    for i = startConfig:nConfigs
        [r1st, ~] = find(DistAlO{i} <= MinimaAlO(1));
        DL1st{i} = Indx.O(unique(r1st));
        [r2nd, ~] = find(DistAlO{i} <= MinimaAlO(2) & DistAlO{i} > MinimaAlO(1)); % Issue with the determining the second minima as there are some snaps with small intermediate water creating very small pockets in the g_AlO(r) for example in the Al_water it seems the second WL lies approx. between minima 1 and 4
        DL2nd{i} = Indx.O(unique(r2nd));
        nonDL{i} = setdiff(Indx.O, [DL1st{i}; DL2nd{i}]);
        
        XYZ_snap = zeros(size(XYZ,2), size(XYZ,3));
        XYZ_snap(:,:) = XYZ(i,:,:);
        
        [~, DistOH1stWL] = GetAtomCorrelation(XYZ_snap, DL1st{i}, Indx.H, ABC);
        [~, DistOH2ndWL] = GetAtomCorrelation(XYZ_snap, DL2nd{i}, Indx.H, ABC);
        [~, DistOHnonDL] = GetAtomCorrelation(XYZ_snap, nonDL{i}, Indx.H, ABC);
        
        for j = 1:length(DL1st{i})
            DL1st{i} = [DL1st{i}; Indx.H(find(DistOH1stWL(:,j)<=MinimaOH(1)))];
        end
        
        for j = 1:length(DL2nd{i})
            
            DL2nd{i} = [DL2nd{i}; Indx.H(find(DistOH2ndWL(:,j)<=MinimaOH(1)))];
        end
        
        for j = 1:length(nonDL{i})
            nonDL{i} = [nonDL{i}; Indx.H(find(DistOHnonDL(:,j)<=MinimaOH(1)))];
        end
        
        nonDL{i} = unique(nonDL{i});
        
    end
end

MeanCharge = zeros(length(AtomList),length(StepNum));
StdCharge = zeros(length(AtomList),length(StepNum));
SumCharge = zeros(length(AtomList),length(StepNum));
SumChargeAls= zeros(length(AtomList),length(StepNum));
totalAlsCharge= zeros(1,length(StepNum));
totalWLsCharge= zeros(1,length(StepNum));

for i = 1:length(StepNum)
    if any(StepNum(i) == StepNum_Traj)
        Inter = find(StepNum(i) == StepNum_Traj);
        DL1st_sum(i) = sum(Qnet(DL1st{Inter},i));
        DL2nd_sum(i) = sum(Qnet(DL2nd{Inter},i));
        nonDL_sum(i) = sum(Qnet(nonDL{Inter},i));
        XYZ_snap = zeros(size(XYZ,2), size(XYZ,3));
        XYZ_snap(:,:) = XYZ(Inter,:,:);
        writeSnaptoxyz(BaseFldr, system, StepNum(i), XYZ_snap, Atoms, [DL1st{Inter}; Indx.Al_All] , DoubleAnalType)
    else % redundant?
        DL1st_sum(i) = 0;
        DL2nd_sum(i) = 0;
        nonDL_sum(i) = 0;
    end
    
    for j = 1:length(AtomList)
        MeanCharge(j,i) = mean(Qnet(Indx.(Indxfns{j}),i));
        StdCharge(j,i) = std(Qnet(Indx.(Indxfns{j}),i));
        SumCharge(j,i) = sum(Qnet(Indx.(Indxfns{j}),i));
        if contains(Indxfns{j},'Al')
            SumChargeAls(j,i) = sum(Qnet(Indx.(Indxfns{j}),i));
        end
    end
end

for i = 1:length(StepNum)

    totalAlsCharge(:,i)=sum(SumChargeAls(:,i));
end

for i = 1:length(StepNum)

    totalWLsCharge(:,i)=sum(SumCharge(4:5,i));
end

% Getting the average number of "O" in the different WLs (1st, 2nd, and
% Bulk/nonDL, respectively)
temp=0;
temp2=0;
temp3=0;

for i = 1:length(DL1st)
    temp=temp+numel(DL1st{i});
end
avenum_DL1st=temp/length(DL1st);

for i = 1:length(DL2nd)
    temp2=temp2+numel(DL2nd{i});
end
avenum_DL2nd=temp2/length(DL2nd);

for i = 1:length(nonDL)
    temp3=temp3+numel(nonDL{i});
end
avenum_nonDL=temp3/length(nonDL);

% Number of Alb, Al1, Al2, and total Al
total_Al=size(xyz.Al,2);
total_Alb=sum(ismember(Atoms,'Alb ','rows'));
total_Al1=sum(ismember(Atoms,'Al1 ','rows'));
total_Al2=sum(ismember(Atoms,'Al2 ','rows'));

% Number of H & O
total_WLs=size(xyz.O,2)+size(xyz.H,2);

[StepNum,sortIdx] = sort(StepNum,'ascend');
SumCharge = SumCharge(:,sortIdx);
SumChargeAls = SumChargeAls(:,sortIdx);
MeanCharge = MeanCharge(:,sortIdx);
StdCharge = StdCharge(:,sortIdx);
DL1st_sum = DL1st_sum(sortIdx);
DL2nd_sum = DL2nd_sum(sortIdx);
nonDL_sum = nonDL_sum(sortIdx);
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%% End of data collection, below are graphs and data %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

prompt1 = "Data collection is done, do you want to proceed? ('y'/'n'): ";
End = input(prompt1);

if End == 'n'
    return
end


% prompt1 = "Do you want to analyze Al? ('y'/'n'): ";
% Al_prompt = input(prompt1);

%% %%%%%%%%%%%%%% illustrations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% NOTE:
% The collected "Qnet" charges are the excess charges, thus in the graphs
% we do an absolute value report where +ve means there was a gain
% and -ve means there was a loss based on excess charge.
%% %%%% ----- Al ----- %%%%
        

% Total charge per Al type
figure
box on
hold on
xlabel('Time (ps)');
ylabel('Total Excess Charge (|e|)');
% title(['Total Bader charge for Al Atoms in ' system], 'interpreter', 'none')
C = [218/255 165/255 32/255; 0.25 0.25 0.25; 0 0.5 0; 0 0 1; 1 0 0];
AlC = [];
for i = 1:length(AlList)
    if contains(AtomList(AlList(i), :), 'Al1')
        AlC = C(1,:);
    elseif contains(AtomList(AlList(i), :), 'Al12')
        AlC = C(2,:);
    elseif contains(AtomList(AlList(i), :), 'Al2')
        AlC = C(3,:);
    elseif contains(AtomList(AlList(i), :), 'Al22')
        AlC = C(4,:);
    elseif contains(AtomList(AlList(i), :), 'Alb')
        AlC = C(5,:);
    end
    plot(StepNum/2000, -SumCharge(AlList(i),:), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', AlC);
end
if length(AlList) == 2
    legend(AtomList(AlList(1),:), AtomList(AlList(2),:), 'interpreter', 'tex')
elseif length(AlList) == 3
    legend(AtomList(AlList(1),:), AtomList(AlList(2),:), AtomList(AlList(3),:), 'interpreter', 'tex')
elseif length(AlList) == 5
    legend(AtomList(AlList(1),:), AtomList(AlList(2),:), AtomList(AlList(3),:), AtomList(AlList(4),:), AtomList(AlList(5),:), 'interpreter', 'tex')
end

for i = 1:length(AlList)
    if contains(AtomList(AlList(i), :), 'Al1')
        AlC = C(1,:);
    elseif contains(AtomList(AlList(i), :), 'Al12')
        AlC = C(2,:);
    elseif contains(AtomList(AlList(i), :), 'Al2')
        AlC = C(3,:);
    elseif contains(AtomList(AlList(i), :), 'Al22')
        AlC = C(4,:);
    elseif contains(AtomList(AlList(i), :), 'Alb')
        AlC = C(5,:);
    end
    plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(SumCharge(AlList(i),:)) -mean(SumCharge(AlList(i),:))], '--', 'color', AlC);
end
if length(AlList) == 2
    legend(AtomList(AlList(1),:), AtomList(AlList(2),:), 'interpreter', 'tex')
elseif length(AlList) == 3
    legend(AtomList(AlList(1),:), AtomList(AlList(2),:), AtomList(AlList(3),:), 'interpreter', 'tex')
elseif length(AlList) == 5
    legend(AtomList(AlList(1),:), AtomList(AlList(2),:), AtomList(AlList(3),:), AtomList(AlList(4),:), AtomList(AlList(5),:), 'interpreter', 'tex')
end
hold off


% mean charge per Al type
figure
box on
hold on
C = [218/255 165/255 32/255; 0.25 0.25 0.25; 0 0.5 0; 0 0 1; 1 0 0];
xlabel('Time (ps)');
ylabel('Ave. Excess Charge per Atom type (|e|)');
% title(['Total Bader charge for Pt Atoms in ' system], 'interpreter', 'none')
AlC = [];
for i = 1:length(AlList)
    if contains(AtomList(AlList(i), :), 'Al1')
        AlC = C(1,:);
    elseif contains(AtomList(AlList(i), :), 'Al12')
        AlC = C(2,:);
    elseif contains(AtomList(AlList(i), :), 'Al2')
        AlC = C(3,:);
    elseif contains(AtomList(AlList(i), :), 'Al22')
        AlC = C(4,:);
    elseif contains(AtomList(AlList(i), :), 'Alb')
        AlC = C(5,:);
    end
    errorbar(StepNum/2000, -MeanCharge(AlList(i),:), -StdCharge(AlList(i),:), '-o', 'color', AlC, 'markeredgecolor', 'k', 'markerfacecolor', AlC);
end
if length(AlList) == 2
    legend(AtomList(AlList(1),:), AtomList(AlList(2),:), 'interpreter', 'tex')
elseif length(AlList) == 3
    legend(AtomList(AlList(1),:), AtomList(AlList(2),:), AtomList(AlList(3),:), 'interpreter', 'tex')
elseif length(AlList) == 5
    legend(AtomList(AlList(1),:), AtomList(AlList(2),:), AtomList(AlList(3),:), AtomList(AlList(4),:), AtomList(AlList(5),:), 'interpreter', 'tex')
end
hold off

figure
box on
hold on
xlabel('Time (ps)');
ylabel('Total Excess Charge (|e|)');
title(['Total Excess Bader charge for all electrolyte species in ' system], 'interpreter', 'none')
C = [1 0 0; 1 1 0; 1 0 0; 0 0.5 0; 0 0 1; 218/255 165/255 32/255;219/255 166/255 34/255];
IonList = 1:length(AtomList);
IonList(AlList) = [];
IonSumCharge = sum(SumCharge(IonList,:));
plot(StepNum/2000, -IonSumCharge, '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'm');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(IonSumCharge(1,2:end)) -mean(IonSumCharge(1,2:end))], '--', 'color', [0.7 0.7 0.7]);
AveStr = ['Traj. Ave. = ' num2str(mean(-IonSumCharge(1,2:end)), '%.2f') '\pm'  num2str(std(-IonSumCharge(1,2:end)), '%.2f')];
legend('Total Electrolyte',AveStr, 'interpreter', 'tex')
hold off

for i = 1:length(AtomList)
    if ~ismember(i, AlList)
        figure
        box on
        hold on
        h1 = plot(StepNum/2000, -SumCharge(i,:), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', C(i,:));
        h2 = plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(SumCharge(i,2:end)) -mean(SumCharge(i,2:end))], '--', 'color', [0.7 0.7 0.7]);
        AveStr = ['Traj. Ave. = ' num2str(mean(-SumCharge(i,2:end)), '%.2f') '\pm'  num2str(std(-SumCharge(i,2:end)), '%.2f')];
        legend(AtomList(i,:), AveStr, 'interpreter', 'tex')
        xlabel('Time (ps)');
        ylabel('Total Excess Charge (|e|)');
        title(['Total Bader charge for ' AtomList(i,:) ' in ' system], 'interpreter', 'none')
        uistack(h1, 'top');
        hold off
    end
end

%% %%%% ----- Water ----- %%%%

%% Bader charge and charge density on 1st layer of DL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
figure
box on
hold on
set(gca, 'colororder', [0 0 0]);
xlabel('Time (ps)');
plot(StepNum(DL1st_sum~=0)/2000, (-DL1st_sum(DL1st_sum~=0)), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'r');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL1st_sum(DL1st_sum~=0)) -mean(DL1st_sum(DL1st_sum~=0))], '--', 'color', 'r');
ylabel('Total Excess Charge (|e|)');
legend('1st Water Layer')
hold off
% Per average number of "O"
figure
box on
hold on
set(gca, 'colororder', [0 0 0]);
xlabel('Time (ps)');
plot(StepNum(DL1st_sum~=0)/2000, (-DL1st_sum(DL1st_sum~=0)/avenum_DL1st), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'r');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL1st_sum(DL1st_sum~=0)/avenum_DL1st) -mean(DL1st_sum(DL1st_sum~=0)/avenum_DL1st)], '--', 'color', 'r');
ylabel('Excess Charge (|e|) / Molecule');
legend('1st Water Layer')
hold off


%% Bader charge and charge density on 2nd layer of DL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
figure
box on
hold on
set(gca, 'colororder', [0 0 0]);
....
xlabel('Time (ps)');
plot(StepNum(DL2nd_sum~=0)/2000, (-DL2nd_sum(DL2nd_sum~=0)), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'r');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL2nd_sum(DL2nd_sum~=0)) -mean(DL2nd_sum(DL2nd_sum~=0))], '--', 'color', 'r');
ylabel('Total Excess Charge (|e|)');
legend('2nd Water Layer')
hold off
% Per average number of "O"
figure
box on
hold on
set(gca, 'colororder', [0 0 0]);
....
xlabel('Time (ps)');
plot(StepNum(DL2nd_sum~=0)/2000, (-DL2nd_sum(DL2nd_sum~=0)/avenum_DL2nd), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'r');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL2nd_sum(DL2nd_sum~=0)/avenum_DL2nd) -mean(DL2nd_sum(DL2nd_sum~=0)/avenum_DL2nd)], '--', 'color', 'r');
ylabel('Excess Charge (|e|) / Molecule');
legend('2nd Water Layer')
hold off

%% Bader charge and charge density on non-DL "Bulk" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
figure
box on
hold on
set(gca, 'colororder', [0 0 0]);
....
xlabel('Time (ps)');
plot(StepNum(nonDL_sum~=0)/2000, (-nonDL_sum(nonDL_sum~=0)), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'g');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(nonDL_sum(nonDL_sum~=0)) -mean(nonDL_sum(nonDL_sum~=0))], '--', 'color', 'g');
ylabel('Total Excess Charge (|e|)');
legend('Bulk Water')
hold off
% Per average number of "O"
figure
box on
hold on
set(gca, 'colororder', [0 0 0]);
....
xlabel('Time (ps)');
plot(StepNum(nonDL_sum~=0)/2000, (-nonDL_sum(nonDL_sum~=0)/avenum_nonDL), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'g');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(nonDL_sum(nonDL_sum~=0)/avenum_nonDL) -mean(nonDL_sum(nonDL_sum~=0)/avenum_nonDL)], '--', 'color', 'g');
ylabel('Excess Charge (|e|) / Molecule');
legend('Bulk Water')
hold off





% Bader charge and charge density on 1st and 2nd layer of DL
figure
box on
hold on
set(gca, 'colororder', [0 0 0]);
....
xlabel('Time (ps)');
plot(StepNum(DL1st_sum~=0)/2000, (-DL1st_sum(DL1st_sum~=0)), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'r');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL1st_sum(DL1st_sum~=0)) -mean(DL1st_sum(DL1st_sum~=0))], '--', 'color', 'r');
% ylabel('Total Charge (e)');
% legend('1st Water Layer')
plot(StepNum(DL2nd_sum~=0)/2000, (-DL2nd_sum(DL2nd_sum~=0)), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'b');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL2nd_sum(DL2nd_sum~=0)) -mean(DL2nd_sum(DL2nd_sum~=0))], '--', 'color', 'b');
ylabel('Total Excess Charge (|e|)');
% legend('2nd Water Layer')
legend('1st Water Layer', '<1st Water Layer>', '2nd Water Layer', '<2nd Water Layer>', 'interpreter', 'tex')
hold off

% Bader charge and charge density on 1st and 2nd layer of DL and nonDL
figure
box on
hold on
set(gca, 'colororder', [0 0 0]);
....
xlabel('Time (ps)');
plot(StepNum(DL1st_sum~=0)/2000, (-DL1st_sum(DL1st_sum~=0)), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'r');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL1st_sum(DL1st_sum~=0)) -mean(DL1st_sum(DL1st_sum~=0))], '--', 'color', 'r');

plot(StepNum(DL2nd_sum~=0)/2000, (-DL2nd_sum(DL2nd_sum~=0)), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'b');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL2nd_sum(DL2nd_sum~=0)) -mean(DL2nd_sum(DL2nd_sum~=0))], '--', 'color', 'b');

plot(StepNum(nonDL_sum~=0)/2000, (-nonDL_sum(nonDL_sum~=0)), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'g');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(nonDL_sum(nonDL_sum~=0)) -mean(nonDL_sum(nonDL_sum~=0))], '--', 'color', 'g');
ylabel('Total Excess Charge (|e|)');

legend('1st Water Layer', '<1st Water Layer>', '2nd Water Layer', '<2nd Water Layer>', 'Bulk Water', '<Bulk Water>', 'interpreter', 'tex')
hold off


%% %%%%%%%%%%%% ----- Combo ----- %%%%%%%%%%%%%%%%

%% Charge per all Al types + 1 DL %%
%Total Charge 
figure
box on
hold on
set(gca, 'colororder', [0 0 0]);
....
xlabel('Time (ps)');
plot(StepNum(DL1st_sum~=0)/2000, (-DL1st_sum(DL1st_sum~=0)), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'r');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL1st_sum(DL1st_sum~=0)) -mean(DL1st_sum(DL1st_sum~=0))], '--', 'color', 'r');

plot(StepNum/2000, -totalAlsCharge, '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'c');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(totalAlsCharge) -mean(totalAlsCharge)], '--', 'color', 'c');
ylabel('Total Excess Charge (|e|)');

legend('1st Water Layer', '<1st Water Layer>', 'Al Layers', '<Al Layers>', 'interpreter', 'tex')
hold off

%Per DL1st molecule 
figure
box on
hold on
set(gca, 'colororder', [0 0 0]);
....
xlabel('Time (ps)');
plot(StepNum(DL1st_sum~=0)/2000, (-DL1st_sum(DL1st_sum~=0)/avenum_DL1st), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'r');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL1st_sum(DL1st_sum~=0))/avenum_DL1st -mean(DL1st_sum(DL1st_sum~=0))/avenum_DL1st], '--', 'color', 'r');

plot(StepNum/2000, -totalAlsCharge/total_Al, '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'c');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(totalAlsCharge)/total_Al -mean(totalAlsCharge)/total_Al], '--', 'color', 'c');
ylabel('Total Excess Charge (|e|)');

legend('1st Water Layer', '<1st Water Layer>', 'Al Layers', '<Al Layers>', 'interpreter', 'tex')
hold off




%% Charge per all Al types  + 1&2 DL %%
%Total Charge
figure
box on
hold on
set(gca, 'colororder', [0 0 0]);
....
xlabel('Time (ps)');
plot(StepNum(DL1st_sum~=0)/2000, (-DL1st_sum(DL1st_sum~=0)), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'r');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL1st_sum(DL1st_sum~=0)) -mean(DL1st_sum(DL1st_sum~=0))], '--', 'color', 'r');

plot(StepNum(DL2nd_sum~=0)/2000, (-DL2nd_sum(DL2nd_sum~=0)), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'b');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL2nd_sum(DL2nd_sum~=0)) -mean(DL2nd_sum(DL2nd_sum~=0))], '--', 'color', 'b');

plot(StepNum/2000, -totalAlsCharge/total_Al, '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'c');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(totalAlsCharge)/total_Al -mean(totalAlsCharge)/total_Al], '--', 'color', 'c');
ylabel('Total Excess Charge (|e|)');

legend('1st Water Layer', '<1st Water Layer>', '2nd Water Layer', '<2nd Water Layer>', 'Al Layers', '<Al Layers>', 'interpreter', 'tex')
hold off

%Per atom
figure
box on
hold on
set(gca, 'colororder', [0 0 0]);
....
xlabel('Time (ps)');
plot(StepNum(DL1st_sum~=0)/2000, (-DL1st_sum(DL1st_sum~=0)/avenum_DL1st), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'r');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL1st_sum(DL1st_sum~=0)/avenum_DL1st) -mean(DL1st_sum(DL1st_sum~=0)/avenum_DL1st)], '--', 'color', 'r');

plot(StepNum(DL2nd_sum~=0)/2000, (-DL2nd_sum(DL2nd_sum~=0)/avenum_DL2nd), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'b');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL2nd_sum(DL2nd_sum~=0)/avenum_DL2nd) -mean(DL2nd_sum(DL2nd_sum~=0)/avenum_DL2nd)], '--', 'color', 'b');

plot(StepNum/2000, -totalAlsCharge/total_Al, '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'c');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(totalAlsCharge)/total_Al -mean(totalAlsCharge)/total_Al], '--', 'color', 'c');
ylabel('Excess Charge (|e|) per Water or Al ');

legend('1st Water Layer', '<1st Water Layer>', '2nd Water Layer', '<2nd Water Layer>', 'Al Layers', '<Al Layers>', 'interpreter', 'tex')
hold off




%% %%%%%%%%%%%%%%%% ----- Everything ----- %%%%%%%%%%%%%%%%

%Total Excess Charge
figure
box on
hold on
set(gca, 'colororder', [0 0 0]);
....
xlabel('Time (ps)');
plot(StepNum(DL1st_sum~=0)/2000, (-DL1st_sum(DL1st_sum~=0)), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'r');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL1st_sum(DL1st_sum~=0)) -mean(DL1st_sum(DL1st_sum~=0))], '--', 'color', 'r');

plot(StepNum(DL2nd_sum~=0)/2000, (-DL2nd_sum(DL2nd_sum~=0)), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'b');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL2nd_sum(DL2nd_sum~=0)) -mean(DL2nd_sum(DL2nd_sum~=0))], '--', 'color', 'b');

plot(StepNum(nonDL_sum~=0)/2000, (-nonDL_sum(nonDL_sum~=0)), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'g');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(nonDL_sum(nonDL_sum~=0)) -mean(nonDL_sum(nonDL_sum~=0))], '--', 'color', 'g');
ylabel('Total Excess Charge (|e|)');

% legend('1st Water Layer', '<1st Water Layer>', '2nd Water Layer', '<2nd Water Layer>', 'Bulk Water', '<Bulk Water>', 'interpreter', 'tex')

xlabel('Time (ps)');
ylabel('Total Excess Charge (|e|)');
% title(['Total Bader charge for Al Atoms in ' system], 'interpreter', 'none')
C = [218/255 165/255 32/255; 0.25 0.25 0.25; 0 0.5 0; 0 0 1; 139/255 0 139/255];
AlC = [];
for i = 1:length(AlList)
    if contains(AtomList(AlList(i), :), 'Al1')
        AlC = C(1,:);
    elseif contains(AtomList(AlList(i), :), 'Al12')
        AlC = C(2,:);
    elseif contains(AtomList(AlList(i), :), 'Al2')
        AlC = C(3,:);
    elseif contains(AtomList(AlList(i), :), 'Al22')
        AlC = C(4,:);
    elseif contains(AtomList(AlList(i), :), 'Alb')
        AlC = C(5,:);
    end
    plot(StepNum/2000, -SumCharge(AlList(i),:), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', AlC);
end

for i = 1:length(AlList)
    if contains(AtomList(AlList(i), :), 'Al1')
        AlC = C(1,:);
    elseif contains(AtomList(AlList(i), :), 'Al12')
        AlC = C(2,:);
    elseif contains(AtomList(AlList(i), :), 'Al2')
        AlC = C(3,:);
    elseif contains(AtomList(AlList(i), :), 'Al22')
        AlC = C(4,:);
    elseif contains(AtomList(AlList(i), :), 'Alb')
        AlC = C(5,:);
    end
    plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(SumCharge(AlList(i),:)) -mean(SumCharge(AlList(i),:))], '--', 'color', AlC);
end
% if length(AlList) == 2
%     legend(AtomList(AlList(1),:), AtomList(AlList(2),:), 'interpreter', 'tex')
% elseif length(AlList) == 3
    % legend(AtomList(AlList(1),:), AtomList(AlList(2),:), AtomList(AlList(3),:), 'interpreter', 'tex')
% elseif length(AlList) == 5
    % legend(AtomList(AlList(1),:), AtomList(AlList(2),:), AtomList(AlList(3),:), AtomList(AlList(4),:), AtomList(AlList(5),:), 'interpreter', 'tex')
% end
legend('1st Water Layer', '<1st Water Layer>', '2nd Water Layer', '<2nd Water Layer>', 'Bulk Water', '<Bulk Water>',AtomList(AlList(1),:), AtomList(AlList(2),:), AtomList(AlList(3),:), 'interpreter', 'tex')

hold off



%% Charge per all Al types + 1&2 DL + Bulk %%
%Total Charge
figure
box on
hold on
set(gca, 'colororder', [0 0 0]);
....
xlabel('Time (ps)');
plot(StepNum(DL1st_sum~=0)/2000, (-DL1st_sum(DL1st_sum~=0)), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'r');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL1st_sum(DL1st_sum~=0)) -mean(DL1st_sum(DL1st_sum~=0))], '--', 'color', 'r');

plot(StepNum(DL2nd_sum~=0)/2000, (-DL2nd_sum(DL2nd_sum~=0)), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'b');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL2nd_sum(DL2nd_sum~=0)) -mean(DL2nd_sum(DL2nd_sum~=0))], '--', 'color', 'b');

plot(StepNum(nonDL_sum~=0)/2000, (-nonDL_sum(nonDL_sum~=0)), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'g');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(nonDL_sum(nonDL_sum~=0)) -mean(nonDL_sum(nonDL_sum~=0))], '--', 'color', 'g');


plot(StepNum/2000, -totalAlsCharge, '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'c');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(totalAlsCharge) -mean(totalAlsCharge)], '--', 'color', 'c');
ylabel('Total Excess Charge (|e|)');

legend('1st Water Layer', '<1st Water Layer>', '2nd Water Layer', '<2nd Water Layer>', 'Bulk Water', '<Bulk Water>', 'Al Layers', '<Al Layers>', 'interpreter', 'tex')
hold off

%Per atom
figure
box on
hold on
set(gca, 'colororder', [0 0 0]);
....
xlabel('Time (ps)');
plot(StepNum(DL1st_sum~=0)/2000, (-DL1st_sum(DL1st_sum~=0)/avenum_DL1st), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'r');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL1st_sum(DL1st_sum~=0)/avenum_DL1st) -mean(DL1st_sum(DL1st_sum~=0)/avenum_DL1st)], '--', 'color', 'r');

plot(StepNum(DL2nd_sum~=0)/2000, (-DL2nd_sum(DL2nd_sum~=0)/avenum_DL2nd), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'b');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(DL2nd_sum(DL2nd_sum~=0)/avenum_DL2nd) -mean(DL2nd_sum(DL2nd_sum~=0)/avenum_DL2nd)], '--', 'color', 'b');

plot(StepNum(nonDL_sum~=0)/2000, (-nonDL_sum(nonDL_sum~=0)/avenum_nonDL), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'g');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(nonDL_sum(nonDL_sum~=0)/avenum_nonDL) -mean(nonDL_sum(nonDL_sum~=0)/avenum_nonDL)], '--', 'color', 'g');


plot(StepNum/2000, -totalAlsCharge/total_Al, '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'c');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(totalAlsCharge)/total_Al -mean(totalAlsCharge)/total_Al], '--', 'color', 'c');
ylabel('Excess Charge (|e|) per Water or Al ');

legend('1st Water Layer', '<1st Water Layer>', '2nd Water Layer', '<2nd Water Layer>', 'Bulk Water', '<Bulk Water>', 'Al Layers', '<Al Layers>', 'interpreter', 'tex')
hold off

%% Charge per all Al types + all WLs %%
%Total Charge
figure
box on
hold on
set(gca, 'colororder', [0 0 0]);
....
xlabel('Time (ps)');
plot(StepNum/2000, (-totalWLsCharge), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'r');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(totalWLsCharge) -mean(totalWLsCharge)], '--', 'color', 'r');

plot(StepNum/2000, -totalAlsCharge, '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'c');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(totalAlsCharge) -mean(totalAlsCharge)], '--', 'color', 'c');
ylabel('Total Excess Charge (|e|)');

legend('Water', '<Water>', 'Al Layers', '<Al Layers>', 'interpreter', 'tex')
hold off

%Per atom
figure
box on
hold on
set(gca, 'colororder', [0 0 0]);
....
xlabel('Time (ps)');
plot(StepNum/2000, (-totalWLsCharge/total_WLs), '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'r');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(totalWLsCharge/total_WLs) -mean(totalWLsCharge/total_WLs)], '--', 'color', 'r');

plot(StepNum/2000, -totalAlsCharge/total_Al, '-o', 'color', 'k', 'markeredgecolor', 'k', 'markerfacecolor', 'c');
plot([StepNum(1)/2000 StepNum(end)/2000], [-mean(totalAlsCharge)/total_Al -mean(totalAlsCharge)/total_Al], '--', 'color', 'c');
ylabel('Excess Charge (|e|) per Water or Al ');

legend('Water', '<Water>', 'Al Layers', '<Al Layers>', 'interpreter', 'tex')
hold off

%% %%%%%%%%%%%%%% Heat map(s) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%Precondition(s)
% <XY coords/all snapshots> --> xyz(nStep, atom, coord) , Bader charge for atoms
% of interest--> <Qnet (atom, nSnap)>

%Output: Heat map for atoms of interest per all snapshots

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Everything Below is working fine %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

AlNums =[];
Al1=[];
Al2=[];
Alb=[];
for i = 1:length(AlList)
    AlNums = [AlNums; Indx.(Indxfns{AlList(i)})];
    Al1=[Al1; Indx.(Indxfns{AlList(1)})];
    Al2=[Al2; Indx.(Indxfns{AlList(2)})];
    Alb=[Alb; Indx.(Indxfns{AlList(3)})];
end

% Creating a double that includes all the Al atoms + 1st Layer of water;

d_DL1st= DL1st(1,1);
%%%% Note: The atoms of the water are added from a single snapshot instead
%%%% of an average (might need to add the average later). 
%%%% Feb 26, 2024: this is not an issue for the 1st WL (in the clean system for sure)
%%%% as the atoms of this layer are stable. %%%%
d_DL1st = cell2mat(d_DL1st);
AlDL1st= cat(1,AlNums,d_DL1st);



% Creating a double that includes all the Al atoms + 1st&2nd Layer of water;

d_DL2nd= DL2nd(1,11);
%%%% Note: The atoms of the water are added from a single snapshot instead
%%%% of an average (might need to add the average later) %%%%
d_DL2nd = cell2mat(d_DL2nd);
AlDL2nd= cat(1,AlNums,d_DL2nd);
AlDL= cat(1,AlNums,d_DL1st,d_DL2nd);


%Same as the note above%
% These are the Al1 atoms affected by 1st WL (bonded and surface neighbors)
d_AlDL1st=DL1st_nAlO(1,1);
d_AlDL1st=cell2mat(d_AlDL1st);

%Al1 atoms affected + 1st WL
nAl1DL1st=cat(1,d_AlDL1st,d_DL1st);

% These are the Al2 atoms affected by 1st WL (bonded and surface neighbors)
d_Al2DL1st=DL1st_Al2_nAlO(1,1);
d_Al2DL1st=cell2mat(d_Al2DL1st);

%Al2 atoms affected + Al1 atoms
nAl2Al1=cat(1,d_Al2DL1st,d_AlDL1st);

%Al2 atoms affected + 1st WL
nAl2DL1st=cat(1,d_Al2DL1st,d_DL1st);

%Al2 + Al1 atoms affected + 1st WL
nAl2Al1DL1st=cat(1,d_Al2DL1st,d_AlDL1st,d_DL1st);

% XYZ_ave(:,:) = mean(XYZ, 1);

%% Average over all ACF snapshots %%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Single molecule investigation %%
S_MeanQnet = mean(Qnet(S_all_Single1WL,1:end),2);
Bader3DCharge(XYZ_snap(S_all_Single1WL,:), ABC, S_MeanQnet);

%% Als ONLY %%
MeanQnet = mean(Qnet(AlNums,1:end),2);
Bader3DCharge(XYZ_snap(AlNums,:), ABC, MeanQnet);
% light
% XYZ_snap = zeros(size(XYZ,2), size(XYZ,3));
% XYZ_snap(:,:) = XYZ(1,:,:);
% MeanQnet = mean(Qnet(PtNums,:),2);

%% Al1 ONLY %%
MeanQnet = mean(Qnet(Al1,1:end),2);
Bader3DCharge(XYZ_snap(Al1,:), ABC, MeanQnet);

%% Al2 ONLY %%
MeanQnet = mean(Qnet(Al2,1:end),2);
Bader3DCharge(XYZ_snap(Al2,:), ABC, MeanQnet);

%% Alb ONLY %%
MeanQnet = mean(Qnet(Alb,1:end),2);
Bader3DCharge(XYZ_snap(Alb,:), ABC, MeanQnet);

%% Al1 affected by DL1st Water only %%
MeanQnet = mean(Qnet(d_AlDL1st,1:end),2);
Bader3DCharge(XYZ_snap(d_AlDL1st,:), ABC, MeanQnet);

%% Al2 affected by DL1st Water only %%
MeanQnet = mean(Qnet(d_Al2DL1st,1:end),2);
Bader3DCharge(XYZ_snap(d_Al2DL1st,:), ABC, MeanQnet);

%% Al1 + Al2 affected by DL1st Water only %%
MeanQnet = mean(Qnet(nAl2Al1,1:end),2);
Bader3DCharge(XYZ_snap(nAl2Al1,:), ABC, MeanQnet);

%% DL1st ONLY %%
MeanQnet = mean(Qnet(d_DL1st,1:end),2);
Bader3DCharge(XYZ_snap(d_DL1st,:), ABC, MeanQnet);

%% DL2nd ONLY %%
MeanQnet = mean(Qnet(d_DL2nd,1:end),2);
Bader3DCharge(XYZ_snap(d_DL2nd,:), ABC, MeanQnet);


%% Al1 affected by DL1st Water + 1WL only %%
MeanQnet = mean(Qnet(nAl1DL1st,1:end),2);
Bader3DCharge(XYZ_snap(nAl1DL1st,:), ABC, MeanQnet); 

%% Al2 affected by DL1st Water + 1WL only %%
MeanQnet = mean(Qnet(nAl2DL1st,1:end),2);
Bader3DCharge(XYZ_snap(nAl2DL1st,:), ABC, MeanQnet);

%% Al1 + Al2 affected by DL1st Water + 1WL only %%
MeanQnet = mean(Qnet(nAl2Al1DL1st,1:end),2);
Bader3DCharge(XYZ_snap(nAl2Al1DL1st,:), ABC, MeanQnet);

%% Als + 1WL ONLY %%
MeanQnet = mean(Qnet(AlDL1st,1:end),2);
Bader3DCharge(XYZ_snap(AlDL1st,:), ABC, MeanQnet);

%% Als + DL %%
MeanQnet = mean(Qnet(AlDL,1:end),2);
Bader3DCharge(XYZ_snap(AlDL,:), ABC, MeanQnet);

%% Bulk Water %%
d_nonDL=nonDL(1,11);
d_nonDL=cell2mat(d_nonDL);
MeanQnet = mean(Qnet(d_nonDL,1:end),2);
Bader3DCharge(XYZ_snap(d_nonDL,:), ABC, MeanQnet);

%% ALL %%
MeanQnet = mean(Qnet(:,1:end),2);
Bader3DCharge(XYZ_snap(:,:), ABC, MeanQnet);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Last snapshot (ALs) (change it base on the system at hand)
Bader3DCharge(XYZ_snap(AlNums,:), ABC, Qnet(AlNums,11));
% light

%% Last snapshot (Al+DL_1st) (change it base on the system at hand)
Bader3DCharge(XYZ_snap(d_DL1st,:), ABC, Qnet(d_DL1st,21));
% light
Bader3DCharge(XYZ_snap(AlDL1st,:), ABC, Qnet(AlDL1st,21));
% light

%% Last snapshot (Al+DL_2nd) (change it base on the system at hand)
Bader3DCharge(XYZ_snap(d_DL2nd,:), ABC, Qnet(d_DL2nd,8));
% light
Bader3DCharge(XYZ_snap(AlDL2nd,:), ABC, Qnet(AlDL2nd,8));
% light

%% Last snapshot (Al+DL) (change it base on the system at hand)
Bader3DCharge(XYZ_snap(AlDL,:), ABC, Qnet(AlDL,8));
% light


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Everything up is working fine %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%% The part below is for the potential drop which requires the
%%%% v-Hartree.cube files for the whole system, water, and the metal
%%%% surface. I currently have the files for the full system but not the
%%%% other two!

% [StepNumPot, EffPotDrop] = CP2K_CalcEffectivePotentialDrop(BaseFldr, system);
% 
% [tf, indx] = ismember(StepNumPot, StepNum);
% 
% figure
% hold on
% ylabel('Total Charge (e)');
% xlabel('Electrostatic Potential (V)');
% % plot(EffPotDrop, HalfElectro(indx), 'o', 'color', 'k', 'markerfacecolor', 'r')
% 
% WLElectro = HalfElectro(DL1st_sum~=0)+(DL1st_sum(DL1st_sum~=0)/2)+(DL2nd_sum(DL1st_sum~=0)/2);
% plot(EffPotDrop, etoC*WLElectro(indx), 'o', 'color', 'k', 'markerfacecolor', 'r')
% for i = 1:length(indx)
%     text(EffPotDrop(i), etoC*WLElectro(indx(i)), [num2str(StepNum(indx(i))/2000) ' s'], 'verticalalignment', 'top', 'horizontalalignment', 'right')
% end
% hold off

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -------------------------------- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% Side Notes and helpful commands:
%1)To turn off the light :
           % delete(findall(gcf,'Type','light'))

